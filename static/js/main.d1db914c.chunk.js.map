{"version":3,"sources":["Learning/Learn.js","Countries/Country.js","serviceWorker.js","index.js"],"names":["Learn","Coun","props","className","src","flag","country","population","region","capital","Controller","names","name","style","display","status","Congo","regionals","Country","useState","count","setCount","search","setSearch","searchRes","setSearchRes","searchByRegion","setSearchByRegion","see","map","coun","key","meme","regional","onClick","fetch","then","res","json","result","placeholder","value","onChange","e","target","onKeyPress","evt","resoltt","catch","err","class","href","event","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d1db914c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Learn (){\r\n\r\n    return (\r\n        <div>\r\n            Hi\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Learn","import React, { useState } from 'react';\r\n\r\n\r\nfunction Country() {\r\n\r\n  const [count, setCount] =  useState([])\r\n  const [search, setSearch] = useState('')\r\n  const [searchRes, setSearchRes] = useState('')\r\n  const [searchByRegion, setSearchByRegion] = useState([])\r\n    function callMe(){\r\n fetch(`https://restcountries.eu/rest/v2/all`)\r\n     .then(res => res.json())\r\n     .then(result => {\r\n        \r\n          setCount(result) }) \r\n          setSearchByRegion([])\r\n    }\r\n \r\n   const see =  count.map( coun=> {\r\n        return (\r\n            < Coun key={coun.name} country={coun.name} population={coun.population} \r\n             flag={coun.flag} region={coun.region}  capital={coun.capital}/> \r\n        )\r\n    })\r\n\r\nconst goTo = evt =>{\r\n     if(evt.key === 'Enter'){\r\n       fetch(`https://restcountries.eu/rest/v2/name/${search}`)\r\n       .then( res => res.json())\r\n       .then(resoltt => {\r\n          setSearchRes(resoltt)\r\n             setCount([])\r\n             setSearchByRegion([])\r\n             setSearch('')\r\n       })\r\n       .catch(err => 'Something went wrong')\r\n   }\r\n}\r\nfunction  handleChange(event){\r\n  fetch(`https://restcountries.eu/rest/v2/region/africa`)\r\n       .then(res => res.json())\r\n       .then(result => {\r\n        setSearchByRegion(result)  \r\n        setCount([])\r\n        })\r\n      .catch(err=> err) \r\n    }   \r\n\r\nfunction  handleEurope(event){\r\n fetch(`https://restcountries.eu/rest/v2/region/europe`)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        setSearchByRegion(result)  \r\n        setCount([])\r\n        })\r\n      .catch(err=> err)   \r\n}\r\nfunction handleOceania(){\r\nfetch(`https://restcountries.eu/rest/v2/region/oceania`)\r\n.then(res => res.json())\r\n.then(result => {\r\nsetSearchByRegion(result)  \r\nsetCount([])\r\n})\r\n.catch(err=> err)\r\n}\r\n\r\nfunction handleAmericas(){\r\nfetch(`https://restcountries.eu/rest/v2/region/americas`)\r\n.then(res => res.json())\r\n.then(result => {\r\nsetSearchByRegion(result)  \r\nsetCount([])\r\n})\r\n.catch(err=> err)\r\n}\r\nfunction handleAsia(){\r\nfetch(`https://restcountries.eu/rest/v2/region/asia`)\r\n.then(res => res.json())\r\n.then(result => {\r\nsetSearchByRegion(result)  \r\nsetCount([])\r\n})\r\n.catch(err=> err)\r\n\r\n}\r\n\r\n\r\nconst meme = searchByRegion.map( regional => {\r\n  return (\r\n      < Congo key={regional.name} regionals={regional.name} population={regional.population} \r\n       flag={regional.flag} region={regional.region}  capital={regional.capital}/> \r\n  )\r\n})\r\n\r\n\r\n        return (\r\n          <section>\r\n            <h4>Where in the World?</h4>\r\n          <div className=\"divide\">\r\n            <button  className=\"funny\" onClick={callMe}>View All Nations</button>\r\n               <input  className=\"funny\" name='search' \r\n               placeholder=\"Search by Country\" \r\n               value={search} \r\n               onChange={e=> setSearch(e.target.value)}\r\n               onKeyPress={goTo}\r\n               />\r\n                  <div class=\"dropdown\">\r\n                    <button class=\"dropbtn\">Regions\r\n                    <i class=\"fa fa-caret-down\"></i>\r\n                    </button>\r\n                      <div class=\"dropdown-content\">\r\n                          <a href=\"#\" onClick={handleChange}>Africa</a>\r\n                          <a href=\"#\" value=\"europe\" onClick={handleEurope} >Europe</a>\r\n                          <a href=\"#\" value=\"americas\" onClick={handleAmericas}>Americas</a>\r\n                          <a href=\"#\" value=\"asia\" onClick={handleAsia}>Asia </a>\r\n                          <a href=\"#\"  value=\"oceania\" onClick={handleOceania}>Oceania</a>    \r\n                          </div>\r\n                    \r\n                  </div> \r\n            </div>\r\n             <div className=\"funny-bone\">\r\n                {see}\r\n               {meme}\r\n              </div>\r\n              < Controller names={searchRes} />\r\n            </section>    \r\n        )}\r\n\r\n      \r\n\r\nfunction Coun(props){\r\n\r\n    return (\r\n       \r\n       <div className=\"cards\" >\r\n      <img src={props.flag}/>\r\n    <h3>Country : {props.country}</h3>\r\n    <p>Population :  {props.population}</p>\r\n    <p>Region : {props.region}</p>\r\n    <p>Capital : {props.capital}</p>\r\n           </div>\r\n         \r\n    \r\n    )\r\n}\r\nfunction Controller(props){\r\n\r\n  return (\r\n    \r\n     <div>\r\n        {(typeof props.names[0] != 'undefined') ? (\r\n        <div>\r\n        <img src={props.names[0].flag}/>\r\n        <h3>Name : {props.names[0].name}</h3>\r\n        <p>Population: {props.names[0].population}</p>\r\n        <p> Region : {props.names[0].region}</p>\r\n         <p> Capital : {props.names[0].capital}</p>\r\n       </div> \r\n         ) : ('')}  \r\n         { <p style={{display : props.names.status > 400 ? 'block' : 'none'}} >Country Not Found</p>}\r\n       </div>\r\n  )\r\n}\r\nfunction Congo(props){\r\n  return (\r\n      <div className=\"cards\">\r\n      <img src={props.flag}/>\r\n<h3>Country : {props.regionals}</h3>\r\n<p>Population : {props.population}</p>\r\n<p>Region : {props.region}</p>\r\n<p> Capital :{props.capital}</p>\r\n      </div>\r\n  )\r\n}  \r\n\r\nexport default Country\r\n\r\n \r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Countries/main.css'\nimport Learn from \"./Learning/Learn\";\nimport Country  from './Countries/Country'\nimport Weather from './Component/Weathered/Weather'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <Country />\n \n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}